This Date table supports advanced fiscal scenarios, including 13-month calendars. Developed by SQLBI — production-ready and battle-tested. No changes needed unless working with a non-standard fiscal structure.

IMPORTANT !!! PLEASE READ
This code is publicly available and shared by SQLBI as part of their learning resources and examples.
I am not claiming authorship — I’m leveraging it as a proven foundation to learn, apply, and build.
I’m not reinventing the wheel — I’m learning how to use it to build better tools.
Reference: DAX Patterns (by SQLBI).

-- Create an advanced Date table with fiscal logic
Date = 
VAR FirstFiscalMonth = 3   -- First month of the fiscal year (March)
VAR MonthsInYear = 12      -- Usually 12, can be 13 for fiscal calendars

-- Get first and last sales dates from fact table
VAR CalendarFirstDate = MIN(Sales[Order Date])
VAR CalendarLastDate = MAX(Sales[Order Date])

-- Extract year/month for both boundaries
VAR CalendarFirstYear = YEAR(CalendarFirstDate)
VAR CalendarFirstMonth = MONTH(CalendarFirstDate)
VAR CalendarLastYear = YEAR(CalendarLastDate)
VAR CalendarLastMonth = MONTH(CalendarLastDate)

-- GranularityByDate generates row per day with a Year Month Number
VAR GranularityByDate =
    ADDCOLUMNS(
        CALENDAR(
            DATE(CalendarFirstYear, CalendarFirstMonth, 1),
            EOMONTH(DATE(CalendarLastYear, CalendarLastMonth, 1), 0)
        ),
        "Year Month Number", YEAR([Date]) * MonthsInYear + MONTH([Date]) - 1
    )

-- For fiscal month modeling: row per month
VAR GranularityByMonth =
    SELECTCOLUMNS(
        GENERATESERIES(
            CalendarFirstYear * MonthsInYear + CalendarFirstMonth - 1
                - (MonthsInYear - 12) * (CalendarFirstMonth < FirstFiscalMonth),
            CalendarLastYear * MonthsInYear + CalendarLastMonth - 1
                - (MonthsInYear - 12) * (CalendarLastMonth < FirstFiscalMonth),
            1
        ),
        "Year Month Number", [Value]
    )

-- Now generate full date table with additional fiscal and calendar columns
RETURN
GENERATE(
    GranularityByDate,
    VAR YearMonthNumber = [Year Month Number]
    VAR FiscalMonthNumber =
        MOD(
            YearMonthNumber + 1 * (FirstFiscalMonth > 1) * (MonthsInYear + 1 - FirstFiscalMonth),
            MonthsInYear
        ) + 1
    VAR FiscalYearNumber =
        QUOTIENT(
            YearMonthNumber + 1 * (FirstFiscalMonth > 1) * (MonthsInYear + 1 - FirstFiscalMonth),
            MonthsInYear
        )
    VAR OffsetFiscalMonthNumber = MonthsInYear + 1 - (MonthsInYear - 12)
    VAR MonthNumber =
        IF(
            FiscalMonthNumber <= 12 && FirstFiscalMonth > 1,
            FiscalMonthNumber + FirstFiscalMonth
                - IF(
                    FiscalMonthNumber > (OffsetFiscalMonthNumber - FirstFiscalMonth),
                    OffsetFiscalMonthNumber,
                    1
                ),
            FiscalMonthNumber
        )
    VAR YearNumber = FiscalYearNumber - 1 * (MonthNumber > FiscalMonthNumber)
    VAR YearMonthKey = YearNumber * 100 + MonthNumber
    VAR MonthDate = DATE(YearNumber, MonthNumber, 1)
    VAR FiscalQuarterNumber = MIN(ROUNDUP(FiscalMonthNumber / 3, 0), 4)
    VAR FiscalYearQuarterNumber = FiscalYearNumber * 4 + FiscalQuarterNumber - 1
    VAR FiscalMonthInQuarterNumber = MOD(FiscalMonthNumber - 1, 3) + 1 + 3 * (MonthNumber > 12)
    VAR MonthInQuarterNumber = MOD(MonthNumber - 1, 3) + 1 + 3 * (MonthNumber > 12)
    VAR QuarterNumber = MIN(ROUNDUP(MonthNumber / 3, 0), 4)
    VAR YearQuarterNumber = YearNumber * 4 + QuarterNumber - 1

    RETURN ROW(
        "Year Month Key", YearMonthKey,
        "Year", YearNumber,
        "Year Quarter", FORMAT(QuarterNumber, "\Q0") & "-" & FORMAT(YearNumber, "0000"),
        "Year Quarter Number", YearQuarterNumber,
        "Quarter", FORMAT(QuarterNumber, "\Q0"),
        "Year Month", IF(MonthNumber > 12, FORMAT(MonthNumber, "\M00") & FORMAT(YearNumber, " 0000"), FORMAT(MonthDate, "mmm yyyy")),
        "Month", IF(MonthNumber > 12, FORMAT(MonthNumber, "\M00"), FORMAT(MonthDate, "mmm")),
        "Month Number", MonthNumber,
        "Month In Quarter Number", MonthInQuarterNumber,
        "Fiscal Year", FORMAT(FiscalYearNumber, "\F\Y 0000"),
        "Fiscal Year Number", FiscalYearNumber,
        "Fiscal Year Quarter", FORMAT(FiscalQuarterNumber, "\F\Q0") & "-" & FORMAT(FiscalYearNumber, "0000"),
        "Fiscal Year Quarter Number", FiscalYearQuarterNumber,
        "Fiscal Quarter", FORMAT(FiscalQuarterNumber, "\F\Q0"),
        "Fiscal Month", IF(MonthNumber > 12, FORMAT(MonthNumber, "\M00"), FORMAT(MonthDate, "mmm")),
        "Fiscal Month Number", FiscalMonthNumber,
        "Fiscal Month In Quarter Number", FiscalMonthInQuarterNumber
    )
)


This Date table is built to support month-level time intelligence and flexible fiscal calendars, including 13-month fiscal years. It allows for powerful analytical capabilities even when standard DAX time intelligence functions are not applicable.

Customization Points:
FirstFiscalMonth → defines the fiscal year start (e.g., March = 3).
MonthsInYear → typically 12 (but can be more for 13-month calendars).
GranularityByDate → one row per day.
GranularityByMonth → one row per month.

Choose your granularity based on the business requirements.

Column Guide
Column	Description	Example
Date	Daily granularity date (only for full-date)	8/14/2007
Year Month Key	YYYYMM used for relationships	200708
Year Month	Month-Year label	Aug 2007
Year Quarter	Quarter-Year label	Q3-2007
Fiscal Year	Fiscal Year label	FY 2008
Fiscal Quarter	Fiscal Quarter label	FQ2
Fiscal Month	Fiscal Month label	Aug
Month Number	Calendar month (1–12 or more)	8
Fiscal Month Number	Fiscal month (1–13)	6
Fiscal Year Quarter Number	Numeric quarter sequence	8033

…plus many helper columns for ease of filtering, relationships, or hierarchy building.

Supported Hierarchies
You can easily create these hierarchies in your model:
Fiscal Year → Quarter → Month
Fiscal Year → Month
Year → Quarter → Month
Year → Month

Use Case Notes
Optimized for visuals at or above the month level.
Does not require all months in a calendar year.
Compatible with DirectQuery and import models.
Avoids the need for DateWithSales columns by design.

Thank you :)
